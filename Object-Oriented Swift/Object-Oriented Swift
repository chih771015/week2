1.2.3 題的程式碼請看playground


4.	學到了物件導向 Class 與 Struct
	這些大概有點像設計圖的概念 
	這東西真的太抽象如果不能完全理解說出來請見諒
	假設這是一台飛機的設計圖
	property就是要給他的零件
	method就是他的動作
	init就是當你在創造一個物件的時候 
	必須要給他的值 
	例如 三顆輪子 兩個翅膀 等等等
	Class 與 Struct 在還沒被創造的時候基本上是不能動作使用的 
	必須讓一個變數 = Class 
	這個變數被建立後才開始動作
	但是不是把原本的設計圖覆蓋掉 
	而是把原本的設計圖複製一份拿到某個地方作出一架飛機
	當然有時候也有例外 
	會有class static 等等之類的東西加入後 
	會變成以主設計圖的數值為主大家一起用的概念 
	而且這個東西會先被創造出來 
	在還沒創造成另外的變數前也可以讀出值
	之類的等等等等等
5. 之間的差異就是 型別 速度 可否繼承 記憶體的儲存差異 
	Struct 比較快 型別 Value Type 不能繼承
	Class  稍慢一點 Reference Type 可以繼承
	如果讓一個a = Struct 
		     b = a 
    若b的值改動 a 不會一起改動 因為他被整份資料複製去另外一個記憶體存放
    aa = class 
    bb = aa
    若 bb值改動 則aa一起變 因為他是指向某個記憶體
6.	​Instance method​ 是一般最常用的 實例方法
	在你還沒創造值時 她是無法動作 因為沒有實體做實例 需要值
	Type Method 就是有點類似設計圖的方法 在還沒創造前就可使用 後面的習題我有用一下這個方法
7. 	init 初始值 當你在創造物件時 必須要給他的數值
	Struct 會自動行成 Class 不會
8.	全域變數的概念
	在某個程式的{}內的{}
	如果有最外層的有個數跟裡面的被宣告的名字一樣
	則在裡面加上self.名字 代表著最外面那層的變數
	在裡面的{}內的宣告變數就是區域變數 代表只在這個區域行程動作
	出去就看不到了
9.	儲存記憶體位置的不同 速度也不一樣
	reference type 放在heap , value type 放在stack
	這兩個記憶體的差異還沒完全研究
	前面幾題有講到的 
	這兩個記憶體有複製或指向的差異
	